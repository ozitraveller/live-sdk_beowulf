#!/usr/bin/env zsh
# star-openbox.blend


BLENDPATH="${BLENDPATH:-$(dirname $0)}"

source $BLENDPATH/config

blend_preinst() {
	fn blend_preinst
	req=(strapdir blendname release)
	ckreq || return 1

	notice "executing ${blendname##*/} preinst"

}

blend_postinst() {
	fn blend_postinst
	req=(strapdir blendname os)
	ckreq || return 1

	if [ -d $workdir/blend-temp ] ; then 
		rm -rf $workdir/blend-temp
	fi
	
	notice "executing $blendname postinst $BLENDPATH  - ${PWD}"
	notice "executing ${blendname##*/} postinst - ${PWD}"
	
	mkdir -p $workdir/blend-temp
	notice "Copying common/rootfs-overlay"
	cp -rf $R/extra/common/rootfs-overlay/* $workdir/blend-temp
	notice "Copying blend/rootfs-overlay"
	cp -rf $BLENDPATH/rootfs-overlay/* $workdir/blend-temp
	
	notice "Copying system hooks"
	cp -rf $R/extra/common/hooks/normal/* $workdir/blend-temp/hooks
	
	#~ echo "ls blend-temp"
	#~ ls -al $workdir/blend-temp
	
	pushd $workdir/blend-temp
		dirs=$(ls -l | awk '{print $9}')
	popd
	echo $dirs > $workdir/tmp_$$
	# Remove lines in blank:
	cat $workdir/tmp_$$ | sed '/^ *$/d' > $workdir/dirs_$$

	for i in $(cat $workdir/dirs_$$); do
		mkdir -p $strapdir/$i
		if [ -d $workdir/blend-temp/$i ] ; then 
			sudo rsync -avx --no-o --no-g $workdir/blend-temp/$i/* $strapdir/$i
		fi
	done

	# Remove temp files:
	rm -rf $workdir/tmp_$$ $workdir/dirs_$$
	rm -rf $workdir/blend-temp
	
	for line in `find $blendname/rootfs-overlay/usr/bin -name "*"`; do
		[[ ${line##*/} != "bin" ]] && chmod -R 655 $strapdir/usr/bin/${line##*/}
	done

	if [ -d $blendname/rootfs-overlay/lib/live/config ] ; then 
		for line in `find $blendname/rootfs-overlay/lib/live/config -name "*"`; do
			echo "${line##*/}"
			[[ ${line##*/} != "config" ]] && chmod -R 700 $strapdir/lib/live/config/${line##*/}
		done
	fi

	for line in `find $R/extra/common/rootfs-overlay/lib/live/config -name "*"`; do
		echo "${line##*/}"
		[[ ${line##*/} != "config" ]] && chmod -R 700 $strapdir/lib/live/config/${line##*/}
	done

	echo \
"# Xwrapper.config (Debian X Window System server wrapper configuration file)
#
# This file was generated by the post-installation script of the
# xserver-xorg-legacy package using values from the debconf database.
#
# See the Xwrapper.config(5) manual page for more information.
#
# This file is automatically updated on upgrades of the xserver-xorg-legacy
# package *only* if it has not been modified since the last upgrade of that
# package.
#
# If you have edited this file but would like it to be automatically updated
# again, run the following command as root:
#   dpkg-reconfigure xserver-xorg-legacy
allowed_users=anybody
needs_root_rights=no
" > $strapdir/etc/X11/Xwrapper.config

}

blend_finalize() {
	fn blend_finalize
	req=(R strapdir os url root blendname section)
	ckreq || return 1

	notice "executing $blend finalize"
	
	#cp -av $R/blends/$blend/dselect/pkglist.txt                    $strapdir/tmp/
	
	sed -i '12i Defaults    env_reset , timestamp_timeout = 0' $strapdir/etc/sudoers	

	# Remove possible replicated lines from sudoers:
	uniq $strapdir/etc/sudoers /tmp/sudoers_$$
	rm -f $strapdir/etc/sudoers
	mv /tmp/sudoers_$$ $strapdir/etc/sudoers 

	echo \
"127.0.0.1       ${os}                localhost
::1              localhost            ip6-localhost ip6-loopback
fe00::0          ip6-localnet
fe00::0          ip6-mcastprefix
fe02::1          ip6-allnodes
fe02::1          ip6-allrouters" > $strapdir/etc/hosts

	cat <<EOF | sudo tee ${strapdir}/finalize >/dev/null
#!/bin/sh

chmod +x /usr/local/bin/usbpmount.sh
chmod +x /usr/local/bin/usb-unmount.sh
rm -f /etc/apt/sources.list~
rm -f /etc/apt/trusted.gpg~
rm -f /home/*.deb
rm -f debconf.set
rm -f .keep

rm -f /etc/apt/*~
cd /root
rm -f .bash_history .cache .dbus .gvfs .local .nano .synaptic .thumbnails
rm -rf .cache .synaptic
cd ..
rm -f vmlinuz.old initrd.img.old
rm -f /etc/ssh/ssh_host_*
rm -f /etc/fstab

chmod +x /etc/rc.local

# see here di_preseed_cfg
chmod +x /usr/bin/preseed-hack

#~ cp -av /etc/skel/.gtkrc-2.0 /root/
#~ mkdir -p /root/.config
#~ mkdir -p /root/.config/gtk-3.0
#~ cp -av /etc/skel/.config/gtk-3.0/settings.ini /root/.config/gtk-3.0/

# display config dialog during the build!
# dpkg-reconfigure xserver-xorg-legacy

apt-get --yes --allow-remove-essential autoremove 
apt-get clean
rm -f /var/lib/apt/lists/*_dists_*

EOF


#ls -al $strapdir

	chroot-script finalize || zerr
	
}

blend_prebuild() {
	fn blend_prebuild
	req=(strapdir blendname)
	ckreq || return 1

notice "executing $blendname prebuild"

	blend_exec_hooks 			|| zerr
	blend_cleanup 				|| zerr
	# blend_write_isolinux_cfg	|| zerr
	blend_Copy_Grub_Overlay	    || zerr

	if ls ${strapdir}/*.txt > /dev/null 2>&1
	then
		notice "moving log file to log folder"
		mv -f $strapdir/*.txt $R/log/
	fi

}

blend_exec_hooks() {
	fn blend_exec_hooks
	req=(strapdir )
	ckreq || return 1

	# called from blend_prebuild
	
notice "Running blend_exec_hooks: '${strapdir}'"
	
	cat <<EOF | sudo tee ${strapdir}/exec_hooks >/dev/null
#!/bin/sh

cd /hooks
#~ # ls ./*.chroot

## Processing local hooks
if ls ./*.chroot > /dev/null 2>&1
then

	for HOOK in ./*.chroot
	do
		if [ ! -x ./"\${HOOK}" ]
		then
			echo "chmod  hook : \${HOOK}"
			chmod +x ./"\${HOOK}"
		fi

		echo "Executing hook : \${HOOK}"
		eval ./"\${HOOK}" # || { Echo_error "\${HOOK} failed (exit non-zero). You should check for errors."; exit 1 ;}

		# echo "Removing hook : \${HOOK}"
		rm -f ./"\${HOOK}"
	done
fi

EOF

# ls -al $strapdir
cat ${strapdir}/exec_hooks

	chroot-script exec_hooks || zerr
	
}

blend_cleanup() {
	fn blend_cleanup
	req=(strapdir blend blendname os version arch release release_name )
	ckreq || return 1

	# called from blend_prebuild
	
notice "Running blend_cleanup"

	cat <<EOF | sudo tee ${strapdir}/scrubclean >/dev/null
#!/bin/sh

rm -rf /hooks

apt-get --yes --allow-remove-essential autoremove
apt --fix-broken install
apt-get clean

EOF
# ls -al $strapdir

cat ${strapdir}/scrubclean

	chroot-script scrubclean || zerr
	
	cp -rfav $R/extra/common/extra/config-files/slim.conf $strapdir/etc/
	
	# Copy in custom apt config here! MUST BE just before the iso is created
	# \cp causes OVERWRITE
	\cp -rfav $R/extra/common/extra/apt-files/apt/* $strapdir/etc/apt/

	sed -i -e 's/REPLACEME/'"${version}"'/g' $strapdir/etc/hostname
	sed -i -e 's/REPLACEME/'"${version}"'/g' $strapdir/etc/issue
	sed -i -e 's/REPLACEME/'"${version}"'/g' $strapdir/etc/issue.net
	sed -i -e 's/REPLACEME/'"${version}"'/g' $strapdir/etc/motd
	sed -i -e 's/REPLACEME/'"${version}"'/g' $strapdir/usr/lib/os-release
	sed -i -e 's/RELEASE-NAME/'"${release_name}"'/g' $strapdir/usr/lib/os-release

	rm -f $strapdir/etc/os-release
	ln -sf $strapdir/usr/lib/os-release $strapdir/etc/os-release
}


blend_Copy_Grub_Overlay() {
	fn blend_Copy_Grub_Overlay
	req=(strapdir)
	ckreq || return 1

	# called from blend_prebuild
	
	notice "copying grub overlay"	

	# rm -rf ${workdir}/binary/boot/grub/*
	cp -rfav /$R/extra/common/grub/boot/grub ${workdir}/binary/boot/
	rm -f ${workdir}/binary/boot/grub/splash.png
	ln ${workdir}/binary/isolinux/splash.png ${workdir}/binary/boot/grub/splash.png

	# see here di_preseed_cfg
	# cp -rfav /$R/extra/common/devuan-installer/preseed/preseed.cfg ${workdir}/binary/install

}

blend_post_efi() {
	fn blend_post_efi
	req=(workdir blend blendname)
	ckreq || return 1

notice "executing $blend post_efi"	

}
