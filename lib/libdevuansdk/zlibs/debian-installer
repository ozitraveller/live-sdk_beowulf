#!/usr/bin/env zsh

di_disk_info() {
	fn di_disk_info
	req=(strapdir workdir os version release earch)
	ckreq || return 1
	
	sudo mkdir -p $workdir/binary/.disk
	
	echo "live" > $workdir/binary/.disk/cd_type
	
	distrib=`echo "$os" | sed 's/^./\u&/'`
	current_time=$(date "+%Y%m%d-%H:%M")
	cd_info="$distrib ${version%%.*} \"${release}\" - Build $earch LIVE/INSTALL Binary $current_time"

	echo "${cd_info}" > $workdir/binary/.disk/info
	
	echo "`echo $(ps -e | date 2>&1)`" > $workdir/binary/.disk/archive_trace
	
	touch $workdir/binary/.disk/base_installable
	
	echo \
"netcfg
ethdetect
pcmciautils-udeb
live-installer" > $workdir/binary/.disk/udeb_include

	echo "main" > $workdir/binary/.disk/base_components
}

di_debmirror () {
	fn di_debmirror
	req=(workdir arch release linux_path url root)
	ckreq || return 1
	
	rm -rf $workdir/repo-$release

	debmirror -h $url \
		--dist=$release \
		--root=$root \
		--arch=$arch \
		--section=main/debian-installer \
		--nosource \
		--progress \
		--ignore-release-gpg \
		--method http \
		--diff=none \
		$workdir/repo-$release
	
	mv $workdir/repo-$release/$linux_path $workdir/repo-$release/${linux_path%/*}/linux
}

di_localudebs () {
	fn di_localudebs
	req=(workdir release arch flavor)
	ckreq || return 1
	
	if [ -d $R/extra/debian-installer/custom-udebs/$release ]; then	
		declare -a localudebs		
		localudebs+=( `find $R/extra/debian-installer/custom-udebs/$release -name "*_$arch.udeb"` )
		localudebs+=( `find $R/extra/debian-installer/custom-udebs/$release -name "*_all.udeb"` )		
		for line in "${localudebs[@]}"; do
			x=$(basename -- "$line")
			rm -f `find $workdir/repo-$release -name "*${x%%_*}*.udeb"`
			cp $line $workdir/repo-$release/pool
		done		
		unset localudebs
	fi
}

di_reprepro () {
	fn di_reprepro "(override)"
	req=(workdir release abiname arch flavor suite mirror)
	ckreq || return 1

	mkdir -p $workdir/binary/conf
	
	echo \
"Origin: Devuan
Label: Debian ${release} packages
Suite: ${suite}
Codename: ${release}
Architectures: ${arch}
Components: main
UDebComponents: main
Description: Packages for devuan-installer
DebIndices: Packages Release . .gz
UDebIndices: Packages Release . .gz " > $workdir/binary/conf/distributions

	rm -rf $workdir/debs && mkdir $workdir/debs	
	pushd $workdir/debs
	wget $mirror/dists/$release/main/binary-$arch/Packages.gz && mv Packages.gz Packages_$arch.gz
	wget $mirror/dists/$release/main/binary-all/Packages.gz   && mv Packages.gz Packages_all.gz
	gzip -d Packages_$arch.gz Packages_all.gz
	cat Packages_$arch Packages_all > Packages
	rm -f Packages_$arch Packages_all 
	
	case $arch in	
		amd64)	grub_efi="grub-efi-amd64"
				;;
		i386)	grub_efi="grub-efi-ia32"
				;;
		*) error "invalid grub_arch specified"; zerr;;
	esac	
	
	di_pkgs=(
		grub-pc
		grub-pc-bin
		$grub_efi
		${grub_efi}-bin
		grub-common
		grub2-common
		efibootmgr
		libefiboot1
		libefivar1
		libpopt0
		ucf
		libdevmapper1.02.1
		libfreetype6
		libfuse2
		gettext-base
		libpng16-16
		dmsetup
		libbrotli1

	)

	for line in $di_pkgs; do
		pkg=`grep "^Filename: pool/" Packages | grep "/${line}_" | grep ".deb$"`
		pkg=`echo $pkg | head -n 1`
		wget $mirror/`echo $pkg | cut -d' ' -f2`
 	done
	
	source $R/extra/debian-installer/reprepro_list
	
	pushd $workdir/binary

	for line in $udebs_list; do
		find $workdir/repo-$release \
			-name "${line}_*${arch}.udeb" \
			-exec reprepro \
				--ask-passphrase -b . -V -C main includeudeb $release {} \;
	done
	
	for line in $udebs_list; do
		find $workdir/repo-$release \
			-name "${line}_*all.udeb" \
			-exec reprepro \
				--ask-passphrase -b . -V -C main includeudeb $release {} \;
	done

	for line in $modules_list; do 
		find $workdir/repo-$release \
			-name "*${line}-modules-${abiname}*-${flavor}-di_*_${arch}.udeb" \
			-exec reprepro \
				--ask-passphrase -b . -V -C main includeudeb $release {} \;
 	done
	
	find $workdir/debs -name "*.deb" -exec reprepro \
		--ask-passphrase -b . -V -C main includedeb $release {} \;		
		
	popd && popd
	
	rm -rf $workdir/binary/{conf,db}
	ln -s $workdir/binary/dists/$release $workdir/binary/dists/$suite	
	
}		
#  "(override)"
di_debian_installer() {
	fn di_debian_installer
	req=(R workdir os release arch strapdir mirror abiname flavor suite)
	ckreq || return 1
	
	conf_print_sourceslist     | sudo tee $workdir/env/etc/apt/sources.list  >/dev/null
	conf_print_debconf ${LANG} | sudo tee $strapdir/debconf.set              >/dev/null


	notice "di_debian_installer"


	cat <<EOF | sudo tee $workdir/env/download_d-i
#!/bin/sh
rm -rf /home/d-i 
mkdir -p /home/d-i
cd /home/d-i
apt-get update
apt-get --yes --allow-unauthenticated install locales dpkg-dev build-essential
apt-get source debian-installer
apt-get clean
EOF

	chroot-script -d download_d-i $workdir/env || zerr
	
	find $workdir/env/home/d-i -name "*.debian.tar.*" -exec rm -f {} \;
	di_changelog=$(find $workdir/env/home/d-i/*/debian -wholename "*debian/changelog")
	[[ -z $di_changelog && ${di_changelog+x} ]] && {
		tarball=$(find $workdir/env/home/d-i -name "*.tar.*")
		compress_type=${tarball##*.}
		case $compress_type in
			xz)
				uncomp_args="-xzvf"
				;;
			gz)
				uncomp_args="-Jxvf"
				;;
			bz2)
				uncomp_args="jvxf"
				;;
			*) error "unknown compress type"; zerr;;
		esac
	
		tar $uncomp_args $tarball
		di_changelog=$(find $workdir/env/home/d-i/*/debian -wholename "*debian/changelog")
	}
	
	x=${di_changelog%/*}
	sources=$(basename -- "${x%/*}")
	common_file=$workdir/env/home/d-i/$sources/build/config/common
	line_1=$(awk -F'=' '$1 ~ /^LINUX_KERNEL_ABI?/ {print $0}' $common_file)
	line_2=${line_1%%=*}"= "$abiname
	sed -i "s/${line_1}/${line_2}/g" $common_file
	mv $workdir/env/home/d-i/$sources/build/localudebs $workdir/env/home/d-i/$sources/build/localudebs~
	mkdir -p $workdir/env/home/d-i/$sources/build/localudebs
	for line in `find $workdir/repo-$release/pool -name "*.udeb"`; do
		cp -av $line $workdir/env/home/d-i/$sources/build/localudebs
	done
		
	notice "Building debian-installer"
	
	for line in $(cat $R/extra/debian-installer/di_extradeps); do
		_extra_deps+="${line##*/} "
	done
	
	# Concatenate extra packages to the pkg-lists:
	cat $R/extra/debian-installer/pkg-lists/base       >> $workdir/env/home/d-i/${sources}/build/pkg-lists/base
	cat $R/extra/debian-installer/pkg-lists/gtk-common >> $workdir/env/home/d-i/${sources}/build/pkg-lists/gtk-common
	cat $R/extra/debian-installer/pkg-lists/exclude    >> $workdir/env/home/d-i/${sources}/build/pkg-lists/exclude
	
	# HACK ALERT:
	[[ -f $R/extra/debian-installer/patches/$release/Makefile.patch ]] && \
		patch -u $workdir/env/home/d-i/${sources}/build/Makefile -i $R/extra/debian-installer/patches/$release/Makefile.patch

	cat <<EOF | sudo tee $workdir/env/build_d-i
#!/bin/sh
cd /home/d-i/${sources}
var=\$(dpkg-checkbuilddeps 2>&1 | sed 's/[\(][^)]*[\)]//g')
apt-get update && apt-get --yes --allow-unauthenticated install \${var##*:} ${_extra_deps}
cd build
echo "deb [trusted=yes] copy:/home/d-i/${sources}/build/ localudebs/" > sources.list.udeb.local
export ONLINE=n
make build_cdrom_isolinux
EOF

	chroot-script -d build_d-i $workdir/env || zerr
	
	mkdir -p $workdir/binary/install
	mkdir -p $workdir/binary/install/gtk
	cp -av $workdir/env/home/d-i/$sources/build/dest/cdrom/initrd.gz     $workdir/binary/install/
	cp -av $workdir/env/home/d-i/$sources/build/dest/cdrom/vmlinuz       $workdir/binary/install/
	cp -av $workdir/env/home/d-i/$sources/build/dest/cdrom/gtk/initrd.gz $workdir/binary/install/gtk/
	cp -av $workdir/env/home/d-i/$sources/build/dest/cdrom/gtk/vmlinuz   $workdir/binary/install/gtk/
}
		
di_preseed_cfg() {
	fn di_preseed_cfg "(override)"
	req=(workdir os)
	ckreq || return 1

## the preseed.cfg file:
	notice "Editing the preseed.cfg file"
	
	mkdir -p $workdir/binary/install
	
	echo \
"
# Enable first user as sudo user
#d-i passwd/root-login boolean false

# Disable loading firmware, provided post install
d-i hw-detect/load_firmware boolean false

# Disable networking set-up, this is a live cd, so not needed as self-contained
d-i netcfg/enable boolean false

# Change default hostname to ${os}
d-i netcfg/get_hostname string ${os}
d-i netcfg/get_hostname seen false

# Change default filesystem from ext3 to ext4 (not necessary since jessie)
d-i partman/default_filesystem string ext4

# Descomente lo siguiente si no quiere usar una réplica en red.
d-i apt-setup/use_mirror boolean false

# Run final commands in target install
d-i preseed/late_command string \
    in-target preseed-hack
    in-target rm -f /usr/bin/preseed-hack
    
# Omitir el mensaje final sobre la finalización de la instalación.
#d-i finish-install/reboot_in_progress note

" > $workdir/binary/install/preseed.cfg

	sudo chmod -R 777 $workdir/binary	
}

#TODO:
di_customize() {
	fn di_customize "(override)"
	req=(R workdir os)
	ckreq || return 1
	
	mkdir -p $workdir/d-i
	mv $workdir/binary/install/gtk/initrd.gz $workdir/d-i
	pushd $workdir/d-i
	gunzip initrd.gz
	mkdir -p tmp && pushd tmp
	
	notice "Customizing debian installer"
	
	cpio -id < ../initrd
	gtkrc="$R/extra/d-i/gtkrc"
	logo="$R/extra/d-i/logo.png"
	symlink="$workdir/d-i/tmp/usr/share/graphics/logo_installer.png"
	
	[[ -f $gtkrc ]] && cp -av $gtkrc $workdir/d-i/tmp/usr/share/themes/Clearlooks/gtk-2.0/
	
	[[ -f $logo  ]] && {
		[[ -f $symlink ]] && rm -f $symlink
		cp -av $logo $workdir/d-i/tmp/usr/share/graphics/logo_${os}.png
		ln -s $workdir/d-i/tmp/usr/share/graphics/logo_${os}.png $symlink
	}
	
	find . | cpio --create --format='newc' > ../initrd
	popd
	gzip -f initrd
	mv initrd.gz $workdir/binary/install/gtk/initrd.gz
	popd
	rm -rf $workdir/d-i/tmp	
}
